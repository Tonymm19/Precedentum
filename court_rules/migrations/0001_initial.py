# Generated by Django 5.2.6 on 2025-10-01 16:45

import court_rules.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CaseTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'db_table': 'case_tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('person', 'Person'), ('organization', 'Organization')], max_length=20)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('org_name', models.CharField(blank=True, max_length=255)),
                ('bar_number', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=50)),
                ('address', models.JSONField(blank=True, null=True)),
                ('preferred_contact_method', models.CharField(blank=True, max_length=50)),
                ('availability', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'contacts',
                'ordering': ['org_name', 'last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Court',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('district', models.CharField(blank=True, max_length=255)),
                ('division', models.CharField(blank=True, max_length=255)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(max_length=64)),
                ('website_url', models.URLField(blank=True)),
            ],
            options={
                'db_table': 'courts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='HolidayCalendar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('jurisdiction', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(max_length=64)),
                ('source_url', models.URLField(blank=True)),
            ],
            options={
                'db_table': 'holiday_calendars',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('lawyer', 'Lawyer'), ('paralegal', 'Paralegal'), ('guest', 'Guest')], max_length=20)),
                ('firm', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(default='America/Chicago', max_length=64)),
                ('mfa_enabled', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['full_name'],
            },
            managers=[
                ('objects', court_rules.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('internal_case_id', models.CharField(max_length=64, unique=True)),
                ('case_number', models.CharField(blank=True, max_length=128)),
                ('caption', models.CharField(max_length=512)),
                ('practice_area', models.CharField(blank=True, max_length=255)),
                ('filing_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('stayed', 'Stayed'), ('closed', 'Closed'), ('appeal', 'Appeal'), ('other', 'Other')], default='open', max_length=16)),
                ('stage', models.CharField(blank=True, max_length=128)),
                ('confidentiality_level', models.CharField(blank=True, max_length=128)),
                ('legal_hold', models.BooleanField(default=False)),
                ('timezone', models.CharField(max_length=64)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lead_attorney', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead_cases', to=settings.AUTH_USER_MODEL)),
                ('court', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cases', to='court_rules.court')),
            ],
            options={
                'db_table': 'cases',
                'ordering': ['-filing_date', 'caption'],
            },
        ),
        migrations.CreateModel(
            name='CaseNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('body', models.TextField()),
                ('visibility', models.CharField(blank=True, max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_notes', to=settings.AUTH_USER_MODEL)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='court_rules.case')),
            ],
            options={
                'db_table': 'case_notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Deadline',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trigger_type', models.CharField(choices=[('rule', 'Rule'), ('court_order', 'Court Order'), ('user', 'User')], max_length=32)),
                ('trigger_source_type', models.CharField(blank=True, max_length=32)),
                ('trigger_source_id', models.UUIDField(blank=True, null=True)),
                ('basis', models.CharField(choices=[('calendar_days', 'Calendar Days'), ('business_days', 'Business Days')], default='calendar_days', max_length=32)),
                ('due_at', models.DateTimeField()),
                ('timezone', models.CharField(max_length=64)),
                ('priority', models.PositiveSmallIntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('status', models.CharField(choices=[('open', 'Open'), ('snoozed', 'Snoozed'), ('done', 'Done'), ('missed', 'Missed')], default='open', max_length=16)),
                ('snooze_until', models.DateTimeField(blank=True, null=True)),
                ('extension_notes', models.TextField(blank=True)),
                ('outcome', models.TextField(blank=True)),
                ('computation_rationale', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deadlines', to='court_rules.case')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_deadlines', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_deadlines', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_deadlines', to=settings.AUTH_USER_MODEL)),
                ('holiday_calendar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deadlines', to='court_rules.holidaycalendar')),
            ],
            options={
                'db_table': 'deadlines',
                'ordering': ['due_at'],
            },
        ),
        migrations.CreateModel(
            name='DeadlineDependency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dependency_type', models.CharField(blank=True, max_length=32)),
                ('predecessor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='successor_links', to='court_rules.deadline')),
                ('successor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predecessor_links', to='court_rules.deadline')),
            ],
            options={
                'db_table': 'deadline_dependencies',
            },
        ),
        migrations.CreateModel(
            name='DeadlineReminder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notify_at', models.DateTimeField()),
                ('channel', models.CharField(choices=[('in_app', 'In App'), ('email', 'Email'), ('sms', 'SMS'), ('push', 'Push')], max_length=16)),
                ('sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('deadline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='court_rules.deadline')),
            ],
            options={
                'db_table': 'deadline_reminders',
                'ordering': ['notify_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('source', models.CharField(choices=[('upload', 'Upload'), ('pacer', 'PACER'), ('web', 'Web'), ('judge_procedure', 'Judge Procedure'), ('rule', 'Rule')], max_length=32)),
                ('url', models.URLField(blank=True)),
                ('file_hash', models.CharField(blank=True, max_length=128)),
                ('mime_type', models.CharField(blank=True, max_length=128)),
                ('page_count', models.PositiveIntegerField(blank=True, null=True)),
                ('ocr_status', models.CharField(choices=[('pending', 'Pending'), ('complete', 'Complete'), ('failed', 'Failed')], default='pending', max_length=16)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='court_rules.case')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='DocketEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entry_no', models.IntegerField(blank=True, null=True)),
                ('entered_at', models.DateTimeField(blank=True, null=True)),
                ('entry_type', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('ecf_link', models.URLField(blank=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='docket_entries', to='court_rules.case')),
                ('pdf_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='docket_references', to='court_rules.document')),
            ],
            options={
                'db_table': 'docket_entries',
                'ordering': ['case', 'entry_no'],
            },
        ),
        migrations.CreateModel(
            name='DocChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('chunk_index', models.PositiveIntegerField()),
                ('start_offset', models.PositiveIntegerField(blank=True, null=True)),
                ('end_offset', models.PositiveIntegerField(blank=True, null=True)),
                ('heading', models.CharField(blank=True, max_length=255)),
                ('content', models.TextField(blank=True)),
                ('embedding_id', models.UUIDField(blank=True, null=True)),
                ('model_version', models.CharField(blank=True, max_length=128)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='court_rules.document')),
            ],
            options={
                'db_table': 'doc_chunks',
                'ordering': ['document', 'chunk_index'],
            },
        ),
        migrations.CreateModel(
            name='Filing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filing_type', models.CharField(blank=True, max_length=255)),
                ('ecf_category', models.CharField(blank=True, max_length=255)),
                ('packaged_as', models.CharField(blank=True, choices=[('single_pdf', 'Single PDF'), ('multi_pdf', 'Multiple PDF')], max_length=20)),
                ('served_at', models.DateTimeField(blank=True, null=True)),
                ('service_method', models.CharField(blank=True, max_length=128)),
                ('notes', models.TextField(blank=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='filings', to='court_rules.case')),
                ('primary_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_for_filings', to='court_rules.document')),
            ],
            options={
                'db_table': 'filings',
                'ordering': ['-served_at'],
            },
        ),
        migrations.CreateModel(
            name='FilingExhibit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=64)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exhibit_of', to='court_rules.document')),
                ('filing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exhibits', to='court_rules.filing')),
            ],
            options={
                'db_table': 'filing_exhibits',
            },
        ),
        migrations.CreateModel(
            name='FilingServiceContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_filings', to='court_rules.contact')),
                ('filing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_contacts', to='court_rules.filing')),
            ],
            options={
                'db_table': 'service_list',
            },
        ),
        migrations.CreateModel(
            name='Hearing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('hearing_type', models.CharField(blank=True, max_length=255)),
                ('starts_at', models.DateTimeField()),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('virtual_link', models.URLField(blank=True)),
                ('requirements', models.TextField(blank=True)),
                ('outcome', models.TextField(blank=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hearings', to='court_rules.case')),
            ],
            options={
                'db_table': 'hearings',
                'ordering': ['starts_at'],
            },
        ),
        migrations.CreateModel(
            name='HearingFollowUp',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('deadline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hearing_followups', to='court_rules.deadline')),
                ('hearing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followups', to='court_rules.hearing')),
            ],
            options={
                'db_table': 'hearing_followups',
            },
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('name', models.CharField(max_length=255)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holidays', to='court_rules.holidaycalendar')),
            ],
            options={
                'db_table': 'holidays',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Judge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=255)),
                ('courtroom', models.CharField(blank=True, max_length=255)),
                ('chambers_url', models.URLField(blank=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=50)),
                ('court', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='judges', to='court_rules.court')),
                ('holiday_calendar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_judges', to='court_rules.holidaycalendar')),
            ],
            options={
                'db_table': 'judges',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='JudgeAssociation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('association_type', models.CharField(blank=True, max_length=50)),
                ('associated_judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primary_assignments', to='court_rules.judge')),
                ('primary_judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='associated_judges', to='court_rules.judge')),
            ],
            options={
                'db_table': 'judge_associations',
            },
        ),
        migrations.CreateModel(
            name='JudgeProcedure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('version', models.CharField(max_length=64)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('content_text', models.TextField(blank=True)),
                ('filing_format', models.JSONField(blank=True, null=True)),
                ('exhibit_labeling', models.JSONField(blank=True, null=True)),
                ('motion_practice', models.JSONField(blank=True, null=True)),
                ('filing_cutoff_time', models.TimeField(blank=True, null=True)),
                ('hearing_windows', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='procedures', to='court_rules.judge')),
            ],
            options={
                'db_table': 'judge_procedures',
                'ordering': ['judge', 'title'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('channel', models.CharField(choices=[('in_app', 'In App'), ('email', 'Email'), ('sms', 'SMS'), ('push', 'Push')], max_length=16)),
                ('payload', models.JSONField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('sent', 'Sent'), ('failed', 'Failed')], default='queued', max_length=16)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications_log',
                'ordering': ['-delivered_at'],
            },
        ),
        migrations.CreateModel(
            name='RetrievalRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('query', models.TextField()),
                ('top_k', models.PositiveIntegerField(default=0)),
                ('scores', models.JSONField(blank=True, null=True)),
                ('selected_spans', models.JSONField(blank=True, null=True)),
                ('model_version', models.CharField(blank=True, max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='retrieval_runs', to='court_rules.case')),
                ('run_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='retrieval_runs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'retrieval_runs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('source_type', models.CharField(choices=[('FRCP', 'FRCP'), ('LocalRule', 'Local Rule'), ('JudgeProcedure', 'Judge Procedure'), ('ECFManual', 'ECF Manual'), ('StandingOrder', 'Standing Order')], max_length=32)),
                ('citation', models.CharField(blank=True, max_length=255)),
                ('jurisdiction', models.CharField(blank=True, max_length=255)),
                ('version', models.CharField(blank=True, max_length=64)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('text', models.TextField(blank=True)),
                ('url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('superseded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supersedes', to='court_rules.rule')),
            ],
            options={
                'db_table': 'rules',
                'ordering': ['jurisdiction', 'citation'],
            },
        ),
        migrations.CreateModel(
            name='RuleCrossRef',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('from_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crossref_from', to='court_rules.rule')),
                ('to_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crossref_to', to='court_rules.rule')),
            ],
            options={
                'db_table': 'rule_crossrefs',
            },
        ),
        migrations.CreateModel(
            name='UserNotificationSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('deadlines', 'Deadlines'), ('docket', 'Docket'), ('hearings', 'Hearings'), ('all', 'All')], max_length=32)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to='court_rules.case')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_notification_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity_table', models.CharField(max_length=255)),
                ('entity_id', models.UUIDField()),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('compute', 'Compute')], max_length=32)),
                ('before', models.JSONField(blank=True, null=True)),
                ('after', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actor_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_log',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['entity_table', 'entity_id'], name='idx_audit_entity')],
            },
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_provider', models.CharField(blank=True, choices=[('google', 'Google'), ('m365', 'Microsoft 365'), ('ical', 'iCal')], max_length=16)),
                ('external_event_id', models.CharField(blank=True, max_length=255)),
                ('starts_at', models.DateTimeField()),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('sync_state', models.CharField(blank=True, max_length=64)),
                ('last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='calendar_events', to='court_rules.case')),
            ],
            options={
                'db_table': 'calendar_events',
                'ordering': ['starts_at'],
                'indexes': [models.Index(fields=['case', 'starts_at'], name='idx_calendar_case_start')],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, max_length=64)),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warn', 'Warn'), ('critical', 'Critical')], default='info', max_length=16)),
                ('title', models.CharField(max_length=255)),
                ('body', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to=settings.AUTH_USER_MODEL)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alerts', to='court_rules.case')),
            ],
            options={
                'db_table': 'alerts',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'created_at'], name='idx_alert_user_created')],
            },
        ),
        migrations.CreateModel(
            name='CasePermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('can_view', models.BooleanField(default=True)),
                ('can_edit', models.BooleanField(default=False)),
                ('can_manage_deadlines', models.BooleanField(default=False)),
                ('can_manage_filings', models.BooleanField(default=False)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='court_rules.case')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='case_permissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'case_permissions',
                'constraints': [models.UniqueConstraint(fields=('case', 'user'), name='unique_case_permission')],
            },
        ),
        migrations.CreateModel(
            name='CaseRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relation_type', models.CharField(blank=True, max_length=64)),
                ('from_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_cases', to='court_rules.case')),
                ('to_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_to', to='court_rules.case')),
            ],
            options={
                'db_table': 'case_relationships',
                'constraints': [models.UniqueConstraint(fields=('from_case', 'to_case'), name='unique_case_relationship')],
            },
        ),
        migrations.CreateModel(
            name='CaseTagAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_assignments', to='court_rules.case')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cases', to='court_rules.casetag')),
            ],
            options={
                'db_table': 'case_tag_assignments',
                'constraints': [models.UniqueConstraint(fields=('case', 'tag'), name='unique_case_tag')],
            },
        ),
        migrations.CreateModel(
            name='CaseTeam',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('contributor', 'Contributor'), ('reviewer', 'Reviewer')], max_length=32)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_members', to='court_rules.case')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='case_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'case_team',
                'constraints': [models.UniqueConstraint(fields=('case', 'user'), name='unique_case_team_member')],
            },
        ),
        migrations.CreateModel(
            name='CaseContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('opposing_counsel', 'Opposing Counsel'), ('client', 'Client'), ('expert', 'Expert'), ('vendor', 'Vendor'), ('reporter', 'Reporter'), ('plaintiff', 'Plaintiff'), ('defendant', 'Defendant'), ('other', 'Other')], max_length=32)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='case_contacts', to='court_rules.case')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='case_roles', to='court_rules.contact')),
            ],
            options={
                'db_table': 'case_contacts',
                'constraints': [models.UniqueConstraint(fields=('case', 'contact', 'role'), name='unique_case_contact_role')],
            },
        ),
        migrations.CreateModel(
            name='ContactAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('address', models.JSONField()),
                ('is_primary', models.BooleanField(default=False)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_addresses', to='court_rules.contact')),
            ],
            options={
                'db_table': 'contact_addresses',
                'constraints': [models.UniqueConstraint(fields=('contact', 'label'), name='unique_contact_address_label')],
            },
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_number'], name='idx_case_case_number'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['court', 'status'], name='idx_case_court_status'),
        ),
        migrations.AddConstraint(
            model_name='deadlinedependency',
            constraint=models.UniqueConstraint(fields=('predecessor', 'successor'), name='unique_deadline_dependency'),
        ),
        migrations.AddIndex(
            model_name='deadlinereminder',
            index=models.Index(fields=['notify_at', 'sent'], name='idx_deadline_reminder_status'),
        ),
        migrations.AddIndex(
            model_name='docketentry',
            index=models.Index(fields=['case'], name='idx_docket_case'),
        ),
        migrations.AddConstraint(
            model_name='docchunk',
            constraint=models.UniqueConstraint(fields=('document', 'chunk_index'), name='unique_chunk_per_document'),
        ),
        migrations.AddConstraint(
            model_name='filingexhibit',
            constraint=models.UniqueConstraint(fields=('filing', 'label'), name='unique_filing_exhibit_label'),
        ),
        migrations.AddConstraint(
            model_name='filingservicecontact',
            constraint=models.UniqueConstraint(fields=('filing', 'contact'), name='unique_service_contact'),
        ),
        migrations.AddIndex(
            model_name='hearing',
            index=models.Index(fields=['case', 'starts_at'], name='idx_hearing_case_start'),
        ),
        migrations.AddConstraint(
            model_name='hearingfollowup',
            constraint=models.UniqueConstraint(fields=('hearing', 'deadline'), name='unique_hearing_followup'),
        ),
        migrations.AddConstraint(
            model_name='holiday',
            constraint=models.UniqueConstraint(fields=('calendar', 'date'), name='unique_holiday_per_calendar'),
        ),
        migrations.AddIndex(
            model_name='deadline',
            index=models.Index(fields=['case', 'due_at'], name='idx_deadline_case_due'),
        ),
        migrations.AddConstraint(
            model_name='judgeassociation',
            constraint=models.UniqueConstraint(fields=('primary_judge', 'associated_judge'), name='unique_judge_association'),
        ),
        migrations.AddConstraint(
            model_name='rulecrossref',
            constraint=models.UniqueConstraint(fields=('from_rule', 'to_rule'), name='unique_rule_crossref'),
        ),
        migrations.AddConstraint(
            model_name='usernotificationsubscription',
            constraint=models.UniqueConstraint(fields=('user', 'case', 'type'), name='unique_subscription_per_case'),
        ),
        migrations.AddConstraint(
            model_name='usernotificationsubscription',
            constraint=models.UniqueConstraint(condition=models.Q(('case__isnull', True)), fields=('user', 'type'), name='unique_global_subscription'),
        ),
    ]
